	--- START ---

[ 2020.02.06 목 ]

#1. 수업소개

1990년 웹 등장 이후,
html을 직접 타이핑해서 웹페이지를 수동으로 만드는 것에 대한 불만
=> 성장의 한계

반복적인 html의 작업을 기계에게 시키는 것을 원함
Server Side Application
=> Node.js 등장

새로운 도구 Node.js
자바스크립트가 웹브라우저를 제어하는 것이라면,
Node.js는 자바스크립트를 이용해서 컴퓨터 자체를 제어


#2. 수업의 목적

생산성의 한계?
Node.js를 사용하면 단 하나의 파일(.js)안의 코드 수정으로
모든 웹페이지의 내용을 바꿀 수 있다.

원리: 사용자가 어떤 페이지를 요청할 때마다
Node.js와 같은 기술이 웹페이지를 프로그래밍적으로 생성해내는 것

웹페이지를 통한 사용자의 참여가 가능해진다.


#3. 설치

Node.js Application
JavaScript
Node.js runtime


#4. 공부방법

목표: Node.js로 애플리케이션을 만드는 것
=> Node.js가 가지고 있는 기능을 실행시켜야 함 => 자바스크립트의 문법


==============================
[ 2020.02.07 금 ]

#5. Node.js로 웹서버 만들기

웹브라우저에 우리가 주소를 입력해서 요청을 하면,
웹서버는 그 요청에 따른 정보를 찾아서 응답하는 관계

Node.js로 웹서버를 구동시키기
cmd창	node main.js
웹서버	localhost:3000

프로그래밍적으로 사용자에게 전송할 데이터를 생성한다.


#6. JavaScript 문법 - Number Data type, String

syntax\number.js
syntax\string.js

#7. JavaScript 문법 - 변수의 형식

syntax\variable.js

#8. JavaScript 문법 - Template Literal

syntax\template.js

줄바꿈을 의미하는 특수한 문자: \n

Template은 정보를 표현하는 기호

String literal
+ name

Template literal
+ ${name}


#9. URL의 이해

URL에 포함된 쿼리 스트링을 해석해서 이용하는 방법

n개의 정적인 페이지를 가지고 있어야 함
=> 같은 파일이지만 값에 따라서 다른 웹페이지를 만들어서 보여줌

ex> http://opentutorials.org:3000/main?id=HTML&page=12
1) http
= protocol(통신규칙), 사용자가 서버에 접속할 때 어떻게 접속할 것인지를 나타냄
2) opentutorials.org
= 인터넷에 접속되어있는 각각의 컴퓨터
3) 3000
= port 번호, 한 대의 컴퓨터에 여러 대의 서버가 있을 경우 어떤 서버와 통신하는지를 나타냄
포트번호를 생략하면 기본적으로 80번으로 접속(default 80)
4) main
= path, 어떤 디렉토리의 어떤 파일인지 가리킴
5) id=HTML&page=12
= query string
?로 시작하는 것이 기본, &와 = 기호 사용


#10. URL을 통해서 입력된 값 사용하기

http://localhost/?id=HTML에서 id=HTML은 query string

URL을 통해 데이터를 추출하는 것(?) = parse
query string에 따라 다른 정보를 출력하는 웹 애플리케이션

@복습 필요!


#11. App 제작 - 동적인 웹페이지 만들기

query string 적용하기
1) template 변수 추가
2) 1.html 내용 복사 붙여넣기
3) query string에 따라 바뀌었으면 하는 부분 -> ${queryData.id}
4) 의미있는 단어로 변경 -> var title = queryData.id
=> query string에 따라 본문의 내용도 바꾸는 방법은?


#12. Node.js의 파일 읽기 기능

CRUD(Create Read Update Delete)
위의 4가지의 연산 및 처리가 정보를 다루는 핵심이다.

모듈: 기본적으로 제공하는 기능들을 그룹핑한 것

Node.js에서 파일을 읽는 방법
=> Node.js의 파일시스템 이용


==============================
[ 2020.02.09 일 ]

#13. App 제작 - 파일을 이용해 본문 구현

1) HTML, CSS, JavaScript, WEB은 확장자가 없는 파일
2) undefined 문제 (상대위치 때문?)
`data/${queryData.id}` => `${__dirname}/data/${queryData.id}`로 수정
3) man.js 파일이 아니라 본문 내용의 수정이 일어날 시 실시간으로 변경되어 적용된다.


#14. JavaScript - Boolean

syntax\boolean.js 

Boolean datatype
비교연산자 Comparison operator
조건문 Conditional statement

#15. JavaScript - 비교연산자

syntax\comparison.js

==와 ===의 차이?

#16. JavaScript - 제어문

program1.js, program2.js

Program이란?
시간의 순서에 따라 실행되는 것

프로그래밍, 프로그래머

Flow control statement
시간에 순서에 따라 실행되는 프로그램을 제어할 수 있다.

#17. JavaScript - 조건문

conditional.js


#18. Node.js - 콘솔에서의 입력값

nput
= parameter(입력되는 정보의 형식)
= argument(형식에 맞게 입력된 값)
Output

ex) Node.js console input parameters
> node conditional.js xxx
> [ ... , ... , xxx]
뒤에 들어오는 입력값을 배열에 넣어서 보여줌


==============================
[ 2020.02.10 월 ]

#19-1. App제작 - Not found 구현

main.js 수정

다른 경로로 접속했을 경우 오류 메시지 띄우기
root로 접속했는가? => pathname이 '/'인지 확인
파일을 찾을 수 없는 경우, 번호 404를 보내고 'Not found' 출력


#19-2. App 제작 - 홈페이지 구현

Welcome페이지 추가
파일경로 수정 data/${queryData.id}


#20. JavaScript - 반복문

syntax\loop.js

Loop statement
while문 

#21. JavaScript - 배열

syntax\array.js

Array data type
var arr = [ ... ]
arr.length, arr.push(x)

#22. JavaScript - 배열과 반복문

syntax\array-loop.js
배열에 있는 원소 값들의 총합을 구하는 코드


#23. Node.js에서 파일목록 알아내기

nodejs\readdir.js

fs.readdir

js파일을 어디서 실행하느냐에 따라 코드가 바뀜(?)
./ 현재 디렉토리의 데이터


#24. App 제작 - 글목록 출력하기

main.js 수정

목록 <ul>태그의 내용을 반복문으로 출력
list += `<li><a href="/?id=${filelist[i]}">${filelist[i]}</a></li>`;

새로운 data가 추가되었을 경우 실시간으로 반영이 된다.


==============================
[ 2020.02.15 토 ]

#25. JavaScript 함수의 기본 문법/입력/출력

함수Function
반복되는 코드가 많으면 유지보수가 어려워진다.
코드 관리를 용이하기 위해서 함수를 사용

입력과 출력이 있는 함수
입력에 따라 다르게 결과가 달라진다.

Math객체의 round함수: 반올림
ex) Math.round(1.6) => 2, Math.round(1.4) => 1

함수의 return문
함수를 다양한 용도로 쓸 수 있도록, 보다 융통성을 가짐


#26. App 제작 - 함수를 이용해서 정리 정돈하기

main.js 수정
중복된 코드를 함수로 만들어서 수정
templateHTML(), templateList()


#27. 수업의 정상

중간정리 TIME !!
앞으로는 하산하는 단계.


#28. Nodejs에서 동기와 비동기 1, 2, callback

sync.js, callback.js

synchronous & asynchronous
비동기적 처리: 동시에, 병렬적으로

비동기적일 경우 readFileSync함수 대신 readFile함수를 사용
=>readFile함수의 세 번째 인자에 함수를 넣음
=> 파일의 내용을 인자로 공급

callback
fs.readFile('syntax/sample.txt', 'utf8', function(err, result) { SOMETHING });
sample.txt 파일을 읽어오는 동안 세번째 인자에 넣은 함수를 실행시켜, 라는 의미

slowfunc함수는 시간이 오래 걸리는 함수.
이 함수가 끝난 뒤 실행되어야 할 일이 있다면,
인자로 callback을 받고 후에 callback을 실행해주면 된다.
slowfunc가 실행되면 callback이라는 인자는 a가 가리키는 함수가 되고, a가 실행되게 된다.


#29. Node.js의 패키지 매니저와 PM2

Package Manager
NPM: JavaScript 패키지 관리자
PM2 명령어
> pm2 start main.js --watch
> pm2 list
> pm2 stop
> pm2 log


==============================
[ 2020.02.18 화 ]

#30. HTML - Form

syntax/form.html

HTML의 Form기능: 누구나 웹페이지에 데이터를 전송할 수 있도록
- textarea태그는 여러줄을 입력할 때 사용
- 제출은 input태그의 submit이란 속성값을 사용
- 데이터를 전송하기 위해 name속성에 값을 지정해주는 것이 필요
- form태그의 action속성에 주소 입력
= 주소에 데이터가 포함되는 경우 서버의 정보가 변경되는 문제가 생길 수 있다.
데이터를 url로 보내면 안된다 => form태그의 methdo속성값을 post로 지정해서 해결


#31. App 제작 - 글생성 UI 만들기

main.js수정: 글쓰기 화면 만들기
pathname이 /create일 때의 조건문 추가


#32. App 제작 - POST 방식으로 전송된 데이터 받기

main.js 수정
pathname이 /create_process일 때의 조건문 추가
createServer의 callback함수의 인자2개 = request, response

POST방식으로 전달되는 데이터가 많을 경우 사용하는 방식
1) request.on('data', function(data){...})
= 서버쪽에서 수신할 때마다 callback함수를 호출함
= data라는 인자를 통해 데이터를 제공, body에 추가
= 용량이 너무 클 경우 연결을 끊는 경우도 있다.

2) request.on('end', function(){...})
= 정보 수신이 끝났을 때 수행
= parse함수 안에 body의 내용을 넣음
= 타이틀과 본문 내용을 알아낼 수 있다.


#33. App 제작 - 파일생성과 리다이렉션

main.js 수정

1) 파일읽기 및 생성
request.on('end', function(){...}); 내용 작성
fs.readFile(`data/${title}`, ... ) = data폴더에 title이라는 이름의 파일을 읽음

2) 리다이렉션
작업을 처리한 후 다른 페이지로 보내는 것
제목인 title인 파일이 post폴더에 생성되고,
title과 description의 내용이 페이지에 보여진다.


==============================
[ 2020.02.21 금 ]

#34. App 제작 - 글 수정, 수정링크 생성

main.js 수정

수정기능
= update 추가
= control변수를 추가, template요소 수정
= 누구의 정보를 수정할지에 대한 정보를 쿼리스트링에서 가져온다.
코드: <a href="/update?id=${title}">update</a>


#35. App 제작 - 글 수정, 수정할 정보 전송

main.js 수정

update버튼 추가
pathname이 /update인 경우 추가
제목: value = "${title}"
본문: ${description}

제목을 수정할 시에 동일명의 정보를 찾을 수 없다는 문제
코드: <input type="hidden" ... >
=> 현재 id와 별개로 수정할 파일의 이름을 title로 받을 수 있게 된다.


#36. App 제작 - 글 수정, 파일명 변경&내용 저장

main.js 수정

정보 받아오기 및 파일 이름 변경하기
fs.rename(`data/${id}`, `data/${title}`, function(err){ ... };
이전 제목은 id, 바꿀 제목은 title, 후에 콜백함수 실행
콜백함수 내부에는 이전의 데이터쓰기 코드 복붙하여 사용


#37. App 제작 - 글 삭제, 삭제버튼 구현

main.js 수정

글 삭제: 특정한 글을 선택한 후 delete버튼을 눌렀을 때 파일 삭제가 되도록

delete버튼 추가
버튼을 누르면 어딘가로 가지 않고 바로 삭제하도록 만드는 것이 목표
하지만 링크를 누르면 어딘가로 가게 된다. = 링크를 사용하면 안 됨!
따라서 링크를 사용하지 않고 form을 사용한다.

사용코드
<form action="delete_process" method="post" onsubmit="xxx">
<input type="hidden" name="id" value="${title}">
<input type="submit" value="delete">
후에 CSS를 사용해서 디자인을 바꿀 수 있다.


#38. App 제작 - 글 삭제 기능 완성

main.js 수정

사용자가 전송한 정보를 바탕으로 삭제 요청을 처리
pathname이 /delete_process일 때의 조건문 추가


#39. JavaScript - 객체의 형식

syntax/object.js

객체Object vs 배열Array
둘 다 정보를 담는 그릇
배열은 순서가 있는, 숫자로 식별자를 부여
객체는 순서가 없는 정보를 저장하기에 좋은 수납상자

#40. JavaScript - 객체 반복

object.js 수정

while문을 사용하여 모든 요소에 접근

#41. JavaScript - 객체, 값으로서 함수

syntax/object2.js

자바스크립트에서 함수는 처리해야 할 일에 대한 정보를 담고 있는 구문이자 값이다.
자바스크립트에서 조건문이라는 구문은 값이 아니다.

객체: 서로 연관된 데이터를 그룹핑한 것
var f = function(){ ... }
var a = [f];
a[0]();	//배열의 원소로써 함수가 존재하는 것을 의미

결국, 자바스크립트에서 함수는 값이 될 수 있다.
처리 방법을 그룹핑하는 함수조차도 데이터이므로 배열과 객체에 담을 수 있다.


==============================
[ 2020.02.25 화 ]

#42. JavaScript - 객체, 데이터와 값을 담는 그릇으로서 객체

syntax/object3.js

서로 연관된 변수 및 함수가 묶여있지 않으면 생기는 문제
- 변수의 값을 바꾸는 경우
- 변수의 선언 사이에 수많은 코드가 있는 경우
=> 객체를 통해 그룹핑함으로써 해결, 코드의 복잡성을 낮출 수 있다.

this의 의미
함수가 객체 안에서 사용될 때, 자신이 속해있는 객체를 참조할 수 있도록 하는 키워드
ex) this.v1, this.v2


#43. App제작 - 템플릿 기능 정리정돈하기

main.js 수정
templateHTML함수와 templateList함수 리팩토링


#44. Node.js 모듈의 형식

nodejs/muse.js, mpart.js

모듈Module
파일을 쪼개서 정리정돈을 수행

1) mpart.js
module.exports = M;
mparts.js의 기능들 중 M이 가리키는 객체를 모듈 밖에서 사용할 수 있도록 하는 코드

2) muse.js
var part = require('./mpart.js');	//현재 위치의 mpart.js가 필요
part.f();				//함수f를 실행


==============================
[ 2020.02.29 토 ]

#45. App제작 - 모듈의 활용

main.js 수정 및 template.js 생성

기존의 변수template의 내용을 template.js에서 관리
var template = require('./lib/template.js');


#46. App 제작 - 입력정보에 대한 보안

main.js 수정

보안Secuirty

앱이 가지고 있는 보안적인 위험요소
1) 오염된 정보가 들어오는 경우,
: 상위디렉토리까지 탐색이 가능해지는 문제가 발생
: 파일이 덮어쓰여지는 문제

var path = require('path');
var filteredId = path.parse(queryData.id 또는 id).base;


#47. App제작 - 출력정보에 대한 보안 1,2,3

47-1.
앱이 가지고 있는 보안적인 위험요소
2) 오염된 정보가 나가는 경우
=> 필터링 필요

검색: html entities = 수동으로 script태그를 바꿔주는 방법
ex. XSS.js파일 내용을 모조리 지우거나 &lt;script&gt;와 같이 화면에 보이게 출력

47-2.
패키지 가져오기
검색: html npm sanitize
npm 홈페이지에서 패키지 사용도를 보고 사용하기
ex. sanitize-html

패키지를 부품으로 사용하기 위한 준비과정
> npm init
> npm install -S sanitize-html

47-3. sanitize-html 사용하기
main.js 수정

내용에 예민한 태그가 있으면 살균하는 기능
var sanitizeHtml = require('sanitize-html');
var sanitizedDescription = sanitizeHtml(description);
=> 기존의 title과 description변수를 수정


#48. API와 CreateServer - 후에 복습 겸 다시 듣기!

API
= Application Programming Interface
Interface를 실행시킴으로써 application을 만들 수 있다.

node.js 홈페이지에 API에 대한 정보가 나와있다.
http는 모듈이면서 객체


#49. 수업을 마치며

* 주제
1) 웹브라우저를 자바스크립트로 제어하는 방법 도전해보기
 클라이언트측 부분 / 서버측 부분 => 모두 자바스크립트로 구현

2) 데이터베이스
데이터베이스라는 전문화된 프로그램에 정보를 저장
몽고DB, MySQL

3) 프레임워크
공통적인 요소를 미리 작성해 놓은 것
프레임워크를 사용하는 법 => 많은 공부 필요
어떤 모듈과 패키지가 있는지 알아보기

Awesome
호기심, 기대 or 불안함?
현재까지 짜본 코드를 다시 짜보기


#49. 부록 - pm2 보충학습

추후에 수강하기!


	--- END ---